<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Patrick's Blog</title><link href="/" rel="alternate"></link><link href="/feeds/all.atom.xml" rel="self"></link><id>/</id><updated>2018-03-14T21:28:00-04:00</updated><entry><title>March 14th 2018</title><link href="/march-fourteen.html" rel="alternate"></link><published>2018-03-14T21:27:00-04:00</published><updated>2018-03-14T21:28:00-04:00</updated><author><name>Patrick Tuite</name></author><id>tag:None,2018-03-14:/march-fourteen.html</id><summary type="html">&lt;p&gt;March Fourteenth 2018&lt;/p&gt;</summary><content type="html">&lt;p&gt;Working on more JavaScript exercises. Quick example solution for this problem. This doesn't feel like the most elegant solution, so I will try to streamline it.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Return true if the string in the first element of the array contains all of the letters of the string in the second element of the array.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;mutation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;test&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;mutate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mutate&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="daily update"></category></entry><entry><title>March 11th 2018</title><link href="/march-eleven.html" rel="alternate"></link><published>2018-03-11T10:27:00-04:00</published><updated>2018-03-11T10:28:00-04:00</updated><author><name>Patrick Tuite</name></author><id>tag:None,2018-03-11:/march-eleven.html</id><summary type="html">&lt;p&gt;March Eleventh 2018&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Difference between join method in JavaScript and Python.&lt;/h2&gt;
&lt;p&gt;It always seemed strange to me that Python join was a string method. In other words to join items in a list together you would pass the list into the join method of whatever string you want to join the list items. This always seemed counterintuitive. The opposite seems to be true in JavaScript. You would pass the string you want to join the list items on into a method called on the array. Example below to join a list of words in a single string including a space.&lt;/p&gt;
&lt;h4&gt;JavaScript&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;joinMe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Split&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;me&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;into&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;an&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;array&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;joinedString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;joinedString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;joinMe&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;joinedString&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Python&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;join_me&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Split&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;me&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;into&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;list&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;joined&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;joined&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;joined&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;join_me&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="daily update"></category></entry><entry><title>March 10th 2018</title><link href="/march-ten.html" rel="alternate"></link><published>2018-03-10T21:07:00-05:00</published><updated>2018-03-11T10:28:00-04:00</updated><author><name>Patrick Tuite</name></author><id>tag:None,2018-03-10:/march-ten.html</id><summary type="html">&lt;p&gt;March Tenth 2018&lt;/p&gt;</summary><content type="html">&lt;p&gt;Issues and Observations:&lt;/p&gt;
&lt;p&gt;Struggling a little bit with the differences between JavaScript and Python, things like for loops and string methods seem much easier in Python. I think it is helpful to go through an example with the differences. Looks like JavaScript has regular expressions built in.
Example below for a simple test of a palindrome.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;palindrome&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Good luck!&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;test&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;test&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/[^a-z0-9]/g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;test&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;test&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;test&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;



&lt;span class="nx"&gt;palindrome&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;eye&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;palindrome&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;[^a-z0-9]&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;my_string&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
  &lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;[::&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="n"&gt;original&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;[^a-z0-9]&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;my_string&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;original&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="daily update"></category></entry><entry><title>March 8th 2018</title><link href="/march-eight.html" rel="alternate"></link><published>2018-03-08T21:07:00-05:00</published><updated>2018-03-08T21:08:00-05:00</updated><author><name>Patrick Tuite</name></author><id>tag:None,2018-03-08:/march-eight.html</id><summary type="html">&lt;p&gt;March Eighth 2018&lt;/p&gt;</summary><content type="html">&lt;p&gt;I almost neglected to write this daily update, but I really want to keep my streak going. I was only able to do a little bit of coding today. I am working on a Udemy course and completed an html form exercise which took a lot longer that I expected. It was definitely useful to get the reps in on that side. I still need to continue working on my portfolio site code for FCC and finish some JavaScript exercises.&lt;/p&gt;</content><category term="daily update"></category></entry><entry><title>March 7th 2018</title><link href="/march-seven.html" rel="alternate"></link><published>2018-03-07T21:07:00-05:00</published><updated>2018-03-07T21:08:00-05:00</updated><author><name>Patrick Tuite</name></author><id>tag:None,2018-03-07:/march-seven.html</id><summary type="html">&lt;p&gt;March Seventh 2018&lt;/p&gt;</summary><content type="html">&lt;p&gt;Issues and Observations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Difference between JS dot notation and bracket notation&lt;/li&gt;
&lt;li&gt;JS Object similar to Python Dictionary What are the differences and similarity?&lt;/li&gt;
&lt;li&gt;JS Array similar to Python lists. What are the differences and similarity?&lt;/li&gt;
&lt;li&gt;Shortcuts in Atom, lorem, html boilerplate etc. &lt;/li&gt;
&lt;/ul&gt;</content><category term="daily update"></category></entry><entry><title>March 5th 2018</title><link href="/march-fifth.html" rel="alternate"></link><published>2018-03-05T21:07:00-05:00</published><updated>2018-03-05T21:08:00-05:00</updated><author><name>Patrick Tuite</name></author><id>tag:None,2018-03-05:/march-fifth.html</id><summary type="html">&lt;p&gt;March Fifth 2018&lt;/p&gt;</summary><content type="html">&lt;p&gt;Today I worked on my free code camp project. I am almost finished, just need to work on some small details.
Covered some topics in Bootstrap. Also, worked on JavaScript. Need to figure out why you would use switch over an if then statement.&lt;/p&gt;</content><category term="daily update"></category></entry><entry><title>March 4th 2018</title><link href="/march-fourth.html" rel="alternate"></link><published>2018-03-04T09:31:00-05:00</published><updated>2018-03-04T09:31:00-05:00</updated><author><name>Patrick Tuite</name></author><id>tag:None,2018-03-04:/march-fourth.html</id><summary type="html">&lt;p&gt;March Fourth 2018&lt;/p&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;JavaScript practice exercises&lt;/li&gt;
&lt;li&gt;Work on Tribute page&lt;/li&gt;
&lt;/ul&gt;</content><category term="daily update"></category></entry><entry><title>March 3rd 2018</title><link href="/march-third.html" rel="alternate"></link><published>2018-03-03T15:27:00-05:00</published><updated>2018-03-03T15:27:00-05:00</updated><author><name>Patrick Tuite</name></author><id>tag:None,2018-03-03:/march-third.html</id><summary type="html">&lt;p&gt;March Third&lt;/p&gt;</summary><content type="html">&lt;p&gt;This morning I did a few JavaScript exercises and added some content to my Free Code Camp tribute page project. I changed the structure a bit. Learning a little more about &lt;a href="https://getbootstrap.com" title="Bootstrap.com"&gt;Bootstrap&lt;/a&gt; rows and col widths. I started a new course on Udemy by Colt Steele, &lt;a href="https://www.udemy.com/the-web-developer-bootcamp/learn/v4/overview" title="Colt Steele"&gt;The Web Developer Bootcamp&lt;/a&gt;. I hate
names like that but I have seen some good reviews. I also tested my Python knowledge by seeing if I could
still code a "FizzBuzz" challenge.&lt;/p&gt;</content><category term="daily update"></category><category term="python"></category></entry><entry><title>First Post!</title><link href="/My-first-post.html" rel="alternate"></link><published>2018-03-02T18:14:00-05:00</published><updated>2018-03-02T18:44:00-05:00</updated><author><name>Patrick Tuite</name></author><id>tag:None,2018-03-02:/My-first-post.html</id><summary type="html">&lt;p&gt;Pelican blog to document learning&lt;/p&gt;</summary><content type="html">&lt;p&gt;I am starting this little blog to give me a space to document what I am currently learning about and force me to update Github everyday. Today I learned about Pelican a static site generator. I was able to successfully deploy this post by creating a virtual environment with conda and installing Pelican. I did the quick-install and several blog &lt;a href="https://rsip22.github.io/blog/create-a-blog-with-pelican-and-github-pages.html" title="Pelican Walkthrough"&gt;posts&lt;/a&gt; and &lt;a href="http://nafiulis.me/making-a-static-blog-with-pelican.html" title="Pelican Walkthough"&gt;walkthroughs&lt;/a&gt; were extremely helpful in my understanding and execution. I also worked on some basic Javascript including intializing variables. &lt;/p&gt;</content><category term="Pelican"></category><category term="learning"></category><category term="python"></category></entry></feed>